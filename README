LAMP server over Docker Compose
===================================

LICENSE: MIT (Unless otherwise stated)

This code is the result of a tutorial that I'm doing in
my blog at deavid.wordpress.com

The main point is to demonstrate with as less code as
possible a playground that could easily be transformed
to a server in production that properly isolates each
website, so even if they contained serious vulnerabilities,
the other tenants would be not affected.

BE CAREFUL!! THIS OPENS SFTP AND FTP WITH DEFAULT PASSWORDS.
DON'T EXPOSE THIS TO UNTRUSTED NETWORKS AND/OR CHANGE THE
PASSWORDS BEFORE RUNNING.

Currently this spins up the following services:

- Nginx (master)
  - Subfolders
  - Virtualhosts
- PHP + Apache example
- PHP + FastCGI
- Python + uWSGI
- MySQL
- PhpMyAdmin
- PostgreSQL
- PgAdmin4
- FTP
- SFTP

Virtual hosts require your /etc/hosts file to be modified.
See "Emulated domains" chapter bellow.

Database servers and PgAdmin4 require a password in order
to setup the first root account.
See "Starting up for the first time" bellow.

Once everything is setup properly, you can do as usual::

  $ docker-compose up


Starting up for the first time
---------------------------------

On the first run, mysql, postgres and pgadmin4 require
a setup step that creates the root accounts.

To do this, execute from this folder::

  $ MYSQL_ROOT_PASSWORD=yourpassword docker-compose up -d mysql-1
  $ POSTGRES_PASSWORD=yourpassword docker-compose up -d postgresql-1
  $ DEFAULT_PASSWORD=yourpassword docker-compose up -d pgadmin4

Be aware that this password will probably be saved into your
bash history.

Once this boots up, you can safely stop the containers and use
the regular "docker-compose up" without passwords from now on.

Emulated domains
-------------------

To enable the domains on this demo you need to edit your hosts file
to resolve the following names to 127.0.0.1:

 - php-apache-1
 - php-fpm-1
 - phpmyadmin
 - pgadmin4

The suggested line to add would be::

  127.0.0.1   php-apache-1 php-fpm-1 phpmyadmin pgadmin4

Be aware that some browsers could require a restart after the change.

Information on how to use this repository
--------------------------------------------

After proper setup (see chapters above), run "docker-compose up -d"
Here is some info for each service:

- Nginx:
  - listening on port 85; so you can run this for testing
    purposes without uninstalling your local webservers.
  - localhost as domain name contains subfolders for different tests:
    - localhost:85/php-apache-1/
    - localhost:85/phpmyadmin/
    - localhost:85/python-uwsgi-1/
  - domains/virtual-hosts:
    - php-apache-1:85
    - php-fpm-1:85
    - phpmyadmin:85
    - pgadmin4:85
- MySQL:
  - Login security has been lowered for compatibility reasons
  - Admin user is "root"
- PhpMyAdmin:
  - Just the regular myadmin. Use "root" and "yourpassword".
- PostgreSQL:
  - Admin user is "postgres"
  - Has "trust" permissions for localhost inside same container
- PgAdmin4:
  - Admin user is "postgres". Use "root" and "yourpassword".
  - Once logged in, create a connection to host "postgresql-1"
    and user "postgres", password "yourpassword".
  - Nginx aggressive caching has been enabled for this site.
    This is for demo purposes on side-effects of this kind
    of caching, not suited for real-life production envs.
- SFTP:
  - Opens port 2201 for php-apache-1 with write access
    - User and password is admin:passwordadmin
  - Opens port 2202 for python-uwsgi-1 with write access
    - User and password is admin:passwordadmin2
  - The owner of the files has to be UID 1000 or change the
    docker-compose.yml file
  - BE CAREFUL AS THIS ALLOWS ANYONE THAT KNOWS THE PASSWORD
    TO CHANGE OR CREATE FILES, THEREFORE IF EXPOSED TO INTERNET
    THIS WILL LEAD TO REMOTE CODE EXECUTION.
- FTP:
  - Opens port 2101 for php-apache-1 with write access
  - User and password is admin:adminpass
  - BE CAREFUL AS THIS ALLOWS ANYONE THAT KNOWS THE PASSWORD
    TO CHANGE OR CREATE FILES, THEREFORE IF EXPOSED TO INTERNET
    THIS WILL LEAD TO REMOTE CODE EXECUTION.

All code is provided for learning purposes. You can adapt this for
your needs at your own risk.

Thanks to all people that created the images required for this to work.

Also, pgadmin4 image was copied and adapted from:
https://github.com/fenglc/dockercloud-pgadmin4/

If you need any other licensing (not likely because is MIT licensed)
or removing the license notice itself, feel free to contact me via email
at deavidsedice@gmail.com


ipset create myset hash:ip timeout 3600
iptables -I INPUT -m set --match-set myset src -j DROP

socat UNIX-RECV:/tmp/test.sock 'EXEC:ipset restore -exist'

socat STDIO UNIX-SEND:/tmp/test.sock
add port-2201 192.168.0.233
list
add myset 192.168.0.233
list

$ sudo aptitude install iptables-persistent ipset-persistent incron
$ nano
/etc/iptables/rules.v4
*filter
-I INPUT -p tcp --dport 2201 -m set ! --match-set port-2201 src -j DROP
-I INPUT -p tcp --dport 2202 -m set ! --match-set port-2202 src -j DROP
-I INPUT -p tcp -m multiport --dports 2101,21010:21019 -m set ! --match-set port-2101 src -j DROP
COMMIT

/etc/iptables/ipsets
create port-2201 hash:ip timeout 1800
create port-2202 hash:ip timeout 1800
create port-2101 hash:ip timeout 1800
create port-2102 hash:ip timeout 1800


$ netfilter-persistent start
$ sudo service docker restart
$ docker-compose up -d container-admin
$ nano /etc/incron.allow
root

$ incrontab -e
/..../docker-lamp/container-admin/ipsets/ipsets.txt IN_MODIFY /sbin/ipset restore -exist -file /..../docker-lamp/container-admin/ipsets/ipsets.txt

https://github.com/rancher/rancher/issues/7691
look at variables to prevent nginx failing when some container is down, or to keep the ip updating between container restarts:
You can fix this by setting an DNS resolver :
resolver 169.254.169.250 valid=5s ipv6=off;

and filling an variable with your DNS name :
set $backendweb web;
proxy_pass http://$backendweb:8000;

maybe we need a local dns resolver as names appear in /etc/hosts
